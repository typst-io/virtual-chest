/*
 * This file is generated by jOOQ.
 */
package dev.entree.vchest.sqlite.tables.records;


import dev.entree.vchest.sqlite.tables.Player;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayerRecord extends UpdatableRecordImpl<PlayerRecord> implements Record3<Integer, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>player.player_id</code>.
     */
    public void setPlayerId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>player.player_id</code>.
     */
    public Integer getPlayerId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>player.player_uuid</code>.
     */
    public void setPlayerUuid(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>player.player_uuid</code>.
     */
    public String getPlayerUuid() {
        return (String) get(1);
    }

    /**
     * Setter for <code>player.player_name</code>.
     */
    public void setPlayerName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>player.player_name</code>.
     */
    public String getPlayerName() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Player.PLAYER.PLAYER_ID;
    }

    @Override
    public Field<String> field2() {
        return Player.PLAYER.PLAYER_UUID;
    }

    @Override
    public Field<String> field3() {
        return Player.PLAYER.PLAYER_NAME;
    }

    @Override
    public Integer component1() {
        return getPlayerId();
    }

    @Override
    public String component2() {
        return getPlayerUuid();
    }

    @Override
    public String component3() {
        return getPlayerName();
    }

    @Override
    public Integer value1() {
        return getPlayerId();
    }

    @Override
    public String value2() {
        return getPlayerUuid();
    }

    @Override
    public String value3() {
        return getPlayerName();
    }

    @Override
    public PlayerRecord value1(Integer value) {
        setPlayerId(value);
        return this;
    }

    @Override
    public PlayerRecord value2(String value) {
        setPlayerUuid(value);
        return this;
    }

    @Override
    public PlayerRecord value3(String value) {
        setPlayerName(value);
        return this;
    }

    @Override
    public PlayerRecord values(Integer value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PlayerRecord
     */
    public PlayerRecord() {
        super(Player.PLAYER);
    }

    /**
     * Create a detached, initialised PlayerRecord
     */
    public PlayerRecord(Integer playerId, String playerUuid, String playerName) {
        super(Player.PLAYER);

        setPlayerId(playerId);
        setPlayerUuid(playerUuid);
        setPlayerName(playerName);
    }
}
