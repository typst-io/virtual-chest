/*
 * This file is generated by jOOQ.
 */
package dev.entree.vchest.sqlite.tables;


import dev.entree.vchest.sqlite.DefaultSchema;
import dev.entree.vchest.sqlite.Keys;
import dev.entree.vchest.sqlite.tables.records.SlotRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Slot extends TableImpl<SlotRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>slot</code>
     */
    public static final Slot SLOT = new Slot();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SlotRecord> getRecordType() {
        return SlotRecord.class;
    }

    /**
     * The column <code>slot.slot_slot</code>.
     */
    public final TableField<SlotRecord, Integer> SLOT_SLOT = createField(DSL.name("slot_slot"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>slot.slot_chest_num</code>.
     */
    public final TableField<SlotRecord, Integer> SLOT_CHEST_NUM = createField(DSL.name("slot_chest_num"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>slot.slot_player_id</code>.
     */
    public final TableField<SlotRecord, Integer> SLOT_PLAYER_ID = createField(DSL.name("slot_player_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>slot.slot_item_bytes</code>.
     */
    public final TableField<SlotRecord, byte[]> SLOT_ITEM_BYTES = createField(DSL.name("slot_item_bytes"), SQLDataType.BLOB.nullable(false), this, "");

    private Slot(Name alias, Table<SlotRecord> aliased) {
        this(alias, aliased, null);
    }

    private Slot(Name alias, Table<SlotRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>slot</code> table reference
     */
    public Slot(String alias) {
        this(DSL.name(alias), SLOT);
    }

    /**
     * Create an aliased <code>slot</code> table reference
     */
    public Slot(Name alias) {
        this(alias, SLOT);
    }

    /**
     * Create a <code>slot</code> table reference
     */
    public Slot() {
        this(DSL.name("slot"), null);
    }

    public <O extends Record> Slot(Table<O> child, ForeignKey<O, SlotRecord> key) {
        super(child, key, SLOT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<SlotRecord> getPrimaryKey() {
        return Keys.SLOT__;
    }

    @Override
    public Slot as(String alias) {
        return new Slot(DSL.name(alias), this);
    }

    @Override
    public Slot as(Name alias) {
        return new Slot(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Slot rename(String name) {
        return new Slot(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Slot rename(Name name) {
        return new Slot(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, byte[]> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
