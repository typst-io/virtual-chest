/*
 * This file is generated by jOOQ.
 */
package dev.entree.vchest.mysql.tables;


import dev.entree.vchest.mysql.Keys;
import dev.entree.vchest.mysql.McVirtualChest;
import dev.entree.vchest.mysql.tables.records.ChestRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Chest extends TableImpl<ChestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mc_virtual_chest.chest</code>
     */
    public static final Chest CHEST = new Chest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChestRecord> getRecordType() {
        return ChestRecord.class;
    }

    /**
     * The column <code>mc_virtual_chest.chest.chest_num</code>.
     */
    public final TableField<ChestRecord, Integer> CHEST_NUM = createField(DSL.name("chest_num"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mc_virtual_chest.chest.chest_player_id</code>.
     */
    public final TableField<ChestRecord, Integer> CHEST_PLAYER_ID = createField(DSL.name("chest_player_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Chest(Name alias, Table<ChestRecord> aliased) {
        this(alias, aliased, null);
    }

    private Chest(Name alias, Table<ChestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mc_virtual_chest.chest</code> table reference
     */
    public Chest(String alias) {
        this(DSL.name(alias), CHEST);
    }

    /**
     * Create an aliased <code>mc_virtual_chest.chest</code> table reference
     */
    public Chest(Name alias) {
        this(alias, CHEST);
    }

    /**
     * Create a <code>mc_virtual_chest.chest</code> table reference
     */
    public Chest() {
        this(DSL.name("chest"), null);
    }

    public <O extends Record> Chest(Table<O> child, ForeignKey<O, ChestRecord> key) {
        super(child, key, CHEST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : McVirtualChest.MC_VIRTUAL_CHEST;
    }

    @Override
    public UniqueKey<ChestRecord> getPrimaryKey() {
        return Keys.KEY_CHEST_PRIMARY;
    }

    @Override
    public List<ForeignKey<ChestRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CHEST_IBFK_1);
    }

    private transient Player _player;

    /**
     * Get the implicit join path to the <code>mc_virtual_chest.player</code>
     * table.
     */
    public Player player() {
        if (_player == null)
            _player = new Player(this, Keys.CHEST_IBFK_1);

        return _player;
    }

    @Override
    public Chest as(String alias) {
        return new Chest(DSL.name(alias), this);
    }

    @Override
    public Chest as(Name alias) {
        return new Chest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Chest rename(String name) {
        return new Chest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Chest rename(Name name) {
        return new Chest(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
